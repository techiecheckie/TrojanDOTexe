<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set dialogue box variables

msg[0] = ""; // placeholder msg text
text = 0;    // char
cur = 0;     // current message
phase = 0;   // finish sentence/to-next

// customization variables
padding = 24;           // text padding
max_width = 280;        // max width of text box
inside_col = c_white;   // inside color of box
text_col = c_dkgray;    // text color
key = ord("Z");         // interaction key
sp = 0.2;                 // characters per step

//display_reset(8, true); // smooth shapes

bob = 0;                // variable to hold slight movement
sine = 0;               // value

width_shift = 0;        // smooth box size x increase/decrease
height_shift = 0;       // smooth box size y increase/decrease

fade = 0;               // fade-in/fade-out
alpha = 0;              // transparency -- changes with phase

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check whether the box is close to its destination with a leeway of 4 pixels both hor and vert
positioned = (x &gt; (xx[cur] - 2) &amp;&amp; x &lt; (xx[cur] + 2) &amp;&amp; y &gt; ((yy[cur] - padding * 2) - 2) &amp;&amp; y &lt; ((yy[cur] - padding * 2) + 2));

// slight vertical bobbing
bob = sin(sine);
sine += .15;

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fntDialogue);
draw_set_alpha(alpha);

width = min(max_width, string_width_ext(msg[cur], -1, max_width) + padding * 2); // width of message, capped at max_width
height = string_height_ext(msg[cur], -1, width) + padding * 2; // height of message box (varies based on message length)

// gradual width and height shifting of box
if (height_shift &lt; height) {
    height_shift += (height - height_shift) / 5;
}

if (height_shift &gt; height) {
    height_shift -= (height_shift - height) / 5;
}

if (width_shift &lt; width) {
    width_shift += (width - width_shift) / 5;
}

if (width_shift &gt; width) {
    width_shift -= (width_shift - width) / 5;
}

// draw box
draw_set_color(inside_col);
draw_roundrect_ext(x - width_shift / 2, y - height_shift + bob, x + width_shift / 2, y + bob, 32, 32, false);

// draw triangle (pointer)
draw_triangle(x - padding, y + bob, x + padding, y + bob, x, y + padding / 2 + bob, false);

// draw text
draw_set_color(text_col);
draw_text_ext(x, y - (height / 2) + bob, string_copy(msg[cur], 1, text), -1, width - padding * 2);

hold = keyboard_check(key); // whether key is held or not

// increase speed
if (text &lt; string_length(msg[cur])) {
    if (positioned) { // if in destination
        text += sp * (1 + hold);
    }
}

// finish sentence if not completed
if (keyboard_check_pressed(key)) {
    if (text != string_length(msg[cur])) {
        text = string_length(msg[cur]);
    } else {
        phase = 1;
    }
}

// move one to next message if it exists - destroy otherwise
if (text == string_length(msg[cur]) &amp;&amp; keyboard_check_pressed(key) &amp;&amp; phase == 1) {
    if (cur &lt; array_length_1d(msg) - 1) {
        cur++;
        text = 0;
        phase = 0;
    } else {
        fade = 1; // fade out
    }
}

// gradual shifting of coordinates of box (below the pointer, as per '-padding * 2' for y)
if (x &lt; xx[cur]) {
    x += ((xx[cur]) - x) / 2;
}

if (x &gt; xx[cur]) {
    x -= (x - (xx[cur])) / 2;
}

if (y &lt; (yy[cur] - padding * 2)) {
    y += ((yy[cur] - padding * 2) - y) / 2;
}

if (y &gt; (yy[cur] - padding * 2)) {
    y -= (y - (yy[cur] - padding * 2)) / 2;
}

draw_set_alpha(1);

// fade-in/out and destroy when nearly invisible
if (fade == 0) {
    if (positioned) {
        if (alpha &lt; 1) {
            alpha += (1 - alpha) / 5;
        }
    }
} else {
    if (alpha &gt; 0) {
        alpha -= (alpha) / 5;
    }

    if (alpha &lt; 0.05) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
